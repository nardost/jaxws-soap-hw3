<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>edu.depaul.ntessema.jaxws</groupId>
    <artifactId>client</artifactId>
    <version>1.0-SNAPSHOT</version>

    <build>
        <plugins>
            <!-- The jaxws-maven-plugin is added to tell maven to use the java wsimport -->
            <!-- tool and generate the client stubs during the generate-source phase. -->
            <!-- The generate-source phase kicks in before the compile phase. All the  -->
            <!-- classes the client needs will have been generated by the time-->
            <!-- the compile phase of the build cycle is reached. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxws-maven-plugin</artifactId>
                <version>2.6</version>

                <executions>
                    <execution>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- The WSDL file is copied from the running service -->
                    <!-- and saved under the resources directory of this module. -->
                    <!-- The maven is told to look for the WSDL file in a local directory -->
                    <!-- that is in the classpath instead of from a remote location (URL). -->
                    <wsdlDirectory>${basedir}/src/main/resources</wsdlDirectory>
                    <wsdlFiles>
                        <wsdlFile>quotes.wsdl</wsdlFile>
                    </wsdlFiles>
                    <packageName>edu.depaul.ntessema.jaxws.client</packageName>
                    <keep>true</keep>
                    <!-- The generated stubs do not have to be added to source code control -->
                    <!-- because they will always be generated on every build. The best -->
                    <!-- location to put them into is, therefore, under the target directory, -->
                    <!-- which is ignored from source code control and cleaned by mvn clean. -->
                    <sourceDestDir>${basedir}/target/generated-sources/jaxws</sourceDestDir>
                </configuration>
            </plugin>
            <!-- The maven-assembly-plugin is used to package the module into  -->
            <!-- an executable fat JAR which contains all of its dependencies. -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>edu.depaul.ntessema.jaxws.client.QuoteOfTheDay</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <properties>
        <!-- JAX-WS has been deprecated since Java 1.9 and -->
        <!-- removed altogether as of version 11. The recommended -->
        <!-- java version is, therefore, Java 1.8. -->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

</project>